// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Administrator
  Manager
  Supervisor
  User
  Viewer
}


enum Statuses {
  Occupied
  Vacant
  Maintenance
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  contactNo     String?
  address       String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole? @default(User)
  department    String?
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt     DateTime @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime @updatedAt
  properties    Property[]
  units         Unit[]
  tenants       Tenant[]
}

model Property {
  id            String @id @default(cuid())
  propertyCode  String
  propertyName  String
  titleNo       String
  lotNo         String
  address       String
  city          String
  province      String
  zipCode       String
  propertyImage String?
  createdBy     String?
  users         User? @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  deletedAt     DateTime?
  lastUpdate    DateTime?
  updatedBy     String?
  units         Unit[]
}

model Unit {
  id            String @id @default(cuid())
  unitCode      String
  unitName      String
  unitStatus    Statuses @default(Vacant)
  gFloorArea    Float?
  mezFloor      Float?
  secFloor      Float?
  thirdFloor    Float?
  roofTop       Float?
  totalArea     Float
  unitImage     String?
  createdBy     String?
  users         User? @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  deletedAt     DateTime?
  lastUpdate    DateTime?
  updatedBy     String?
  propertyId    String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenants       Tenant[]
}

model Tenant {
  id            String @id @default(cuid())
  tenantCode    String
  tenantName    String
  tenantEmail   String
  tenantImage   String
  contactNo     String?
  address       String?
  city          String?
  zipCode       String?
  createdAt     DateTime @default(now())
  createdBy     String?
  users         User? @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  deletedAt     DateTime?
  lastUpdate    DateTime?
  updatedBy     String?
  unitId        String
  units         Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)
}




model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

