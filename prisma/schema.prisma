
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Administrator
  Manager
  Supervisor
  Custodian
  Viewer
}

enum Statuses {
  Occupied
  Vacant
  Maintenance
}

enum PaymentType {
  Quarterly
  Annual
}

enum PaymentStatus {
  Unpaid
  Paid
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  contactNo     String?
  address       String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole? @default(Viewer)
  department    String?
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt     DateTime @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime @updatedAt
  property      Property[]
}

model Property {
  id            String @id @default(cuid())
  propertyCode  String
  propertyName  String
  titleNo       String
  lotNo         String
  registeredOwner String
  address       String
  city          String
  province      String
  createdAt     DateTime @default(now())
  updatedBy     String?
  custodianId   String?
  custodian     User? @relation(fields: [custodianId], references: [id], onDelete: Cascade)
  companyId     String
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  rpt           RPT[]
  attachments   Attachments[]
}

model RPT {
  id            String @id @default(cuid())
  TaxDecNo      String
  PaymentMode   PaymentType
  DueDate       String
  Status        PaymentStatus
  custodianRemarks String
  createdAt     DateTime @default(now())
  updatedBy     String?
  deletedAt     DateTime?
  propertyId    String?
  property      Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  attachments   Attachments[]
}

model Company {
  id            String @id @default(cuid())
  companyName   String
  address       String
  image         String?
  createdAt     DateTime @default(now())
  updatedBy     String
  property      Property[]
}

model Attachments {
  id            String @id @default(cuid())
  files         String
  createdAt     DateTime @default(now())
  createdBy     String
  propertyId    String?
  property      Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  rptId         String?
  rpt           RPT? @relation(fields: [rptId], references: [id], onDelete: Cascade)
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

