datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Administrator
  Manager
  Supervisor
  Tenant
  Staff
}

enum Statuses {
  Occupied
  Vacant
  Maintenance
}

enum PaymentType {
  Quarterly
  Annual
  Monthly
}

enum PaymentStatus {
  Unpaid
  Paid
}

model Tenant {
  id                    String                 @id @default(cuid())
  firstName             String
  lastName              String
  contactNo             String?
  address               String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole?              @default(Tenant)
  space                 Space[]
  lease                 Lease[]
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  deletedAt             DateTime?
  updatedAt             DateTime               @updatedAt
}

model User {
  id                    String                 @id @default(cuid())
  firstName             String
  lastName              String
  contactNo             String?
  address               String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole?              @default(Staff)
  department            String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  deletedAt             DateTime?
  updatedAt             DateTime               @updatedAt
}

model Property {
  id              String        @id @default(cuid())
  propertyCode    String
  propertyName    String
  titleNo         String
  lotNo           String
  registeredOwner String
  address         String
  city            String
  province        String
  propertyType    String
  oRate           String?
  createdAt       DateTime      @default(now())
  updatedBy       String?
  attachments     Attachments[]
  rpt             RPT[]
  Lease           Lease[]
  space           Space[]
}

model Space {
  id           String   @id @default(cuid())
  spaceNumber  String
  spaceArea    String
  spaceStatus  String?
  spaceRemarks String?
  propertyId   String
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenantId     String?
  tenant       Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  rpt          RPT[]
}

model Lease {
  id         String   @id @default(cuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  rent       String
  status     String
  createdAt  DateTime @default(now())
}

model RPT {
  id               String        @id @default(cuid())
  TaxDecNo         String
  PaymentMode      PaymentType
  DueDate          String
  Status           PaymentStatus
  custodianRemarks String
  createdAt        DateTime      @default(now())
  updatedBy        String?
  deletedAt        DateTime?
  propertyId       String?
  property         Property?     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  spaceId          String?
  space            Space?        @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  attachments      Attachments[]
}

model Attachments {
  id         String    @id @default(cuid())
  files      String
  createdAt  DateTime  @default(now())
  createdBy  String
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  rptId      String?
  rpt        RPT?      @relation(fields: [rptId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  tenantId          String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant            Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId   String
  tenantId String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
