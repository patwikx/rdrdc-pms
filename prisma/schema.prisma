// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Administrator
  Approver
  User
  PMD
}

enum Months {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}

enum Periods {
  FirstHalf
  SecondHalf
}

enum PlsType {
  Official
  Personal
  Leave
}

enum DayType {
  HalfDay
  WholeDay
}

enum Statuses {
  Approved
  Pending
  Declined
}
model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  contactNo     String?
  address       String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole? @default(User)
  department    String?
  leaveBalance  String?
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt     DateTime @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime @updatedAt
  leave         Leave[] @relation("UserToLeave")
  forApprovalLeaves Leave[] @relation("ApproverToLeave")
  approverId    String?
  payslip       Payslip[] @relation("UserToPayslip")
}



model Department {
  id          String @id @default(cuid()) @unique
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedBy   String?
  deletedAt   DateTime?
}


model Payslip {
  id          String @id @default(cuid()) @unique
  payslipFile String
  months      Months
  periods     Periods
  userId      String
  user        User @relation("UserToPayslip",fields: [userId], references: [id])
}

model Leave {
  id          String @id @default(cuid()) @unique
  leaveType   String
  startDate   String
  endDate     String
  reason      String
  approverRemarks String?
  pmdRemarks  String?
  dayType     DayType?
  status      Statuses @default(Pending)
  createdAt   DateTime @default(now())
  userId      String
  user        User @relation("UserToLeave", fields: [userId], references: [id])
  approverId  String
  approver    User? @relation("ApproverToLeave", fields: [approverId], references: [id])
}

model LeaveType {
  id          String @id @default(cuid()) @unique
  name        String
  description String?
  createdAt   DateTime @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Board {
  id String @id @default(cuid())
  title String
}

